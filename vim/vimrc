set encoding=utf-8
scriptencoding utf-8

let g:mapleader = ","

augroup vimrc
	autocmd!
augroup END

" NeoBundle.vim
" ==============================================================================
filetype off

if has('vim_starting')
	set runtimepath+=$HOME/.vim/neobundle.vim.git/
endif

call neobundle#begin(expand('$HOME/.vim/bundle/'))
NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimfiler'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/neosnippet-snippets'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/vimproc', {
			\	'build' : {
			\		'mac' : 'make'
			\	},
			\}
NeoBundle 'tsaleh/vim-align'
NeoBundle 'tpope/vim-surround'
NeoBundle 'rgarver/Kwbd.vim'
NeoBundle 'tyru/caw.vim'
NeoBundle 'vim-scripts/sudo.vim'
NeoBundle 'fuenor/qfixgrep.git'
NeoBundle 'glidenote/memolist.vim'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'nathanaelkane/vim-indent-guides.git'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'thinca/vim-fontzoom'
NeoBundle 'fuenor/vim-wordcount'
NeoBundle 'rhysd/clever-f.vim'
NeoBundle 'justinmk/vim-sneak'
NeoBundle 'osyo-manga/vim-over'

" HTML
NeoBundle 'othree/html5.vim'
NeoBundle 'nono/vim-handlebars'

" CSS
NeoBundle 'wavded/vim-stylus'

" JavaScript
NeoBundle 'jelera/vim-javascript-syntax'
NeoBundle 'othree/javascript-libraries-syntax.vim'
NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'elzr/vim-json'
NeoBundle 'moll/vim-node'
NeoBundle 'mxw/vim-jsx'

" Ruby
NeoBundle 'ruby.vim'

" CoffeeScript
NeoBundle 'kchmck/vim-coffee-script'

" Markdown
NeoBundle 'tpope/vim-markdown'

" Haskell
NeoBundle 'kana/vim-filetype-haskell'
NeoBundle 'eagletmt/neco-ghc'
NeoBundle 'dag/vim2hs'

" ColorScheme
NeoBundle 'w0ng/vim-hybrid'

call neobundle#end()
filetype plugin indent on

set shortmess+=I
set nowritebackup
set nobackup
set noswapfile
set undodir=$HOME/.vim_undo
set hidden

" ColorScheme
" ==============================================================================
let g:hybrid_use_Xresources = 1
set background=dark
colorscheme hybrid
set t_Co=256

" Encoding
" ==============================================================================
set fileencodings=utf-8,cp932,euc-jp,iso-2022-jp,ucs-2,latin1
set termencoding=utf-8

" Edit
" ==============================================================================
set backspace=indent,eol,start
set clipboard+=unnamed
set history=50
set nrformats-=octal
set timeoutlen=3500
set formatoptions+=mM
set virtualedit=block
set whichwrap=b,s,h,l,<,>,[,],~
if exists('&ambiwidth')
	set ambiwidth=double
endif
set wildmenu

" make したら :copen
autocmd vimrc QuickfixCmdPost make copen

" insertモードを抜けるとIMEオフ
set noimdisable
set iminsert=0 imsearch=0
set noimcmdline
inoremap :set iminsert=0

" Indent
" -----------------------------------------------------------------------------
set expandtab
set cindent
set tabstop=2
set shiftwidth=2
set softtabstop=2
set shiftround

" View
" ==============================================================================
syntax on
set number
set title
set cmdheight=2
set laststatus=2
set showcmd
set ruler
set display=lastline
set noequalalways
set shellslash
set list
set listchars=tab:^\ ,trail:~
set showmatch
set synmaxcol=200
set cursorline

" 対応する括弧の強調
set matchtime=1
let g:loaded_matchparen = 1

set showtabline=2

set statusline=%t\ %m%r%h%w[%Y][%{&fenc}][%{&ff}]%=%11p%%\ %l,%c

" Search
" ==============================================================================
set hlsearch
set ignorecase
set smartcase
set incsearch
set wrapscan

" 検索結果が中央に来るように
nnoremap n nzzzv
nnoremap N Nzzzv

au BufEnter * silent! lcd %:p:h

" grep周り
nnoremap [q :cprevious<CR>
nnoremap ]q :cnext<CR>
nnoremap [Q :<C-u>cfirst<CR>
nnoremap ]Q :<C-u>clast<CR>

" Common Keymap
" ==============================================================================
inoremap <C-j> <Esc>
vnoremap <C-j> <Esc>

noremap ; :
noremap : ;

nnoremap <F5> :source %<CR>
nnoremap ZZ <Nop>

nnoremap j gj
nnoremap k gk

nnoremap <silent> <ESC><ESC> :nohl<CR>

" Plugin
" ==============================================================================

" unite.vim
" ------------------------------------------------------------------------------
function! s:unite_my_settings()
	imap <buffer> jj <Plug>(unite_insert_leave)
	nmap <buffer> <Esc> <Plug>(unite_exit)
	imap <buffer> <Esc> <Plug>(unite_exit)
	imap <buffer> <C-j> <Plug>(unite_exit)
	imap <buffer> <C-o> <Plug>(unite_insert_leave):<C-u>call unite#mappings#do_action('above')<CR>
endfunction

" neocomplete
" ------------------------------------------------------------------------------
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? "\<C-y>" : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" Enable omni completion.
autocmd vimrc FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd vimrc FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd vimrc FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd vimrc FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd vimrc FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

" neosnippet
" ------------------------------------------------------------------------------
let g:neosnippet#snippets_directory= expand('$HOME/.vim/snippets')
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)

" kwbd
" ------------------------------------------------------------------------------
nnoremap <C-q><C-q> :Kwbd<CR>

" Align
" ------------------------------------------------------------------------------
let g:Align_xstrlen=3

" VimFiler
" ------------------------------------------------------------------------------
let g:vimfiler_as_default_explorer = 1
noremap <C-\> :VimFilerCurrentDir -split -simple -winwidth=45 -no-quit<ENTER>
autocmd vimrc FileType vimfiler nmap <buffer> <CR> <Plug>(vimfiler_expand_or_edit)
"nnoremap <C-\> :<C-u>VimFilerBufferDir<CR>
"セーフモードを無効にした状態で起動する
let g:vimfiler_safe_mode_by_default = 0

" indent-guides
" ------------------------------------------------------------------------------
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1

" memolist
" ------------------------------------------------------------------------------
let g:memolist_path = expand('$HOME/Dropbox/memolist.vim')
let g:memolist_memo_suffix = 'md'
let g:memolist_qfixgrep = 1
nnoremap <Leader>mf :exe "CtrlP" g:memolist_path<CR>
nnoremap <Leader>mc :MemoNew<CR>
nnoremap <Leader>ml :MemoList<CR>
nnoremap <Leader>mg :MemoGrep<CR>

" quickrun
" ------------------------------------------------------------------------------
let g:quickrun_config = {}

let g:quickrun_config['_'] = {
			\	"outputter/buffer/split" : ":botright 8sp",
			\	"runner": "vimproc",
			\	"runner/vimproc/updatetime": 60
			\}

let g:quickrun_config['html'] = {
			\	"command" : "open",
			\	"exec"    : "%c %s",
			\	"outputter" : "null"
			\}

let g:quickrun_config['markdown'] = {
			\	"command" : "open",
			\	"cmdopt" : '-a',
			\	"args" : 'Marked',
			\	"exec" : "%c %o %a %s",
			\	"outputter" : "null"
			\}

" <C-c> で実行を強制終了させる
" quickrun.vim が実行していない場合には <C-c> を呼び出す
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

nnoremap <silent> <Leader>r :QuickRun<CR>

" over.vim
" ------------------------------------------------------------------------------
nnoremap <silent> <Leader>o <C-u>:OverCommandLine<CR>%s/

" sneak.vim
" ------------------------------------------------------------------------------
nmap <enter> <Plug>SneakNext
xmap <enter> <Plug>SneakNext
nmap <bs>    <Plug>SneakPrevious
xmap <bs>    <Plug>SneakPrevious

" WordCount
" ------------------------------------------------------------------------------
set statusline+=[wc:%{WordCount()}]
set updatetime=500

" CtrlP
" ------------------------------------------------------------------------------
let g:ctrlp_map = '<Nop>'
nnoremap <silent> <C-P><C-P> :<C-u>CtrlPMixed<CR>
nnoremap <silent> <C-P><C-B> :<C-u>CtrlPBuffer<CR>
nnoremap <silent> <C-P><C-M> :<C-u>CtrlPMRUFiles<CR>
nnoremap <silent> <C-P><C-L> :<C-u>CtrlPLine<CR>

" Open new file in current window
let g:ctrlp_open_new_file = 'r'
let g:ctrlp_extensions = ['line', 'mixed']
let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:18'

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$|node_modules|vendor\/bundle'

" caw.vim
" ------------------------------------------------------------------------------
nmap <Leader>c <Plug>(caw:i:toggle)
vmap <Leader>c <Plug>(caw:i:toggle)

" 外部設定ファイル
" ==============================================================================
" vimrc.local が存在していれば読み込む
if filereadable(expand('$HOME/.vim/vimrc.local'))
	source ~/.vim/vimrc.local
endif
