set nocompatible
let mapleader = ","

" NeoBundle.vim
" ==============================================================================
filetype off
if has('vim_starting')
	set runtimepath+=~/.vim/neobundle.vim.git/
endif

call neobundle#rc(expand('~/.vim/bundle/'))

NeoBundle 'Shougo/vimfiler'
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/neocomplete.vim'
NeoBundle 'Shougo/neosnippet'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'Shougo/vimshell'
NeoBundle 'Shougo/vimproc', {
			\	'build' : {
			\		'mac' : 'make -f make_mac.mak',
			\		'unix' : 'make -f make_unix.mak',
			\	},
			\}
NeoBundle 'tsaleh/vim-align'
NeoBundle 'tpope/vim-surround'
NeoBundle 'rgarver/Kwbd.vim'
NeoBundle 'vim-scripts/The-NERD-Commenter'
NeoBundle 'vim-scripts/sudo.vim'
NeoBundle 'fuenor/qfixgrep.git'
NeoBundle 'thinca/vim-qfreplace.git'
NeoBundle 'glidenote/memolist.vim'
NeoBundle 'kien/ctrlp.vim'
NeoBundle 'nathanaelkane/vim-indent-guides.git'
NeoBundle 'thinca/vim-quickrun'
NeoBundle 'osyo-manga/unite-quickfix'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'thinca/vim-fontzoom'
NeoBundle 'fuenor/vim-wordcount'
NeoBundle 'rhysd/clever-f.vim'

" HTML
NeoBundle 'mattn/emmet-vim'
NeoBundle 'othree/html5.vim'
NeoBundle 'nono/vim-handlebars'

" JavaScript
NeoBundle 'pangloss/vim-javascript.git'
NeoBundle 'jQuery'
NeoBundle 'digitaltoad/vim-jade'

" Ruby
NeoBundle 'ruby.vim'

" CoffeeScript
NeoBundle 'kchmck/vim-coffee-script'

" Markdown
NeoBundle 'tpope/vim-markdown'

" Haskell
NeoBundle 'kana/vim-filetype-haskell'
NeoBundle 'eagletmt/neco-ghc'
NeoBundle 'dag/vim2hs'

" ColorScheme
NeoBundle 'w0ng/vim-hybrid'

" Syntax Check
NeoBundle 'osyo-manga/shabadou.vim'
NeoBundle 'osyo-manga/vim-watchdogs'
NeoBundle 'jceb/vim-hier'

scriptencoding utf-8
set shortmess+=I
set nowritebackup
set nobackup
set noswapfile
set undodir=~/.vim/undo
set hidden
filetype plugin indent on

" ColorScheme
" ==============================================================================
let g:hybrid_use_iTerm_colors = 1 " for hybrid colorscheme
colorscheme hybrid
set t_Co=256


" Encoding
" ==============================================================================
set fileencodings=utf-8,cp932,euc-jp,iso-2022-jp,ucs-2,latin1
set encoding=utf-8
set termencoding=utf-8


" Edit
" ==============================================================================
set backspace=indent,eol,start
set clipboard+=unnamed
set history=50
set nrformats-=octal
set timeoutlen=3500
set formatoptions+=mM
set virtualedit=block
set whichwrap=b,s,h,l,<,>,[,],~
if exists('&ambiwidth')
	set ambiwidth=double
endif
set wildmenu

" make したら :copen
autocmd QuickfixCmdPost make copen

" insertモードを抜けるとIMEオフ
set noimdisable
set iminsert=0 imsearch=0
set noimcmdline
inoremap :set iminsert=0

" Indent
" -----------------------------------------------------------------------------
set tabstop=4
set shiftwidth=4
set softtabstop=4
set autoindent
set smartindent


" View
" ==============================================================================
set number
set title
set cmdheight=2
set laststatus=2
set showcmd
set ruler
set display=lastline
set noequalalways
set shellslash
set list
set listchars=tab:^\ ,trail:~
set showmatch

" 対応する括弧の強調
set matchtime=1
let loaded_matchparen = 1

set showtabline=2

set statusline=%t\ %m%r%h%w[%Y][%{&fenc}][%{&ff}]%=%11p%%\ %l,%c


" Search
" ==============================================================================
set ignorecase
set smartcase
set incsearch
set wrapscan

" 検索結果が中央に来るように
nnoremap n nzzzv
nnoremap N Nzzzv

" 検索結果ハイライト
if &t_Co > 2 || has("gui")
	syntax on
	set hlsearch
endif

au BufEnter * silent! lcd %:p:h


" Keymap
" ==============================================================================
inoremap <C-j> <Esc>
vnoremap <C-j> <Esc>

noremap ; :
noremap : ;

nnoremap <F5> :source %<CR>
nnoremap ZZ <Nop>

nnoremap j gj
nnoremap k gk

nnoremap <silent> <ESC><ESC> :nohl<CR>

nnoremap <silent> <Leader>tc :<C-u>tabnew<CR>:tabmove<CR>
nnoremap <silent> <Leader>tk :<C-u>tabclose<CR>
nnoremap <silent> <Leader>tn :<C-u>tabnext<CR>
nnoremap <silent> <Leader>tp :<C-u>tabprevious<CR>
nnoremap <silent> <C-t><C-n> :<C-u>tabnext<CR>
nnoremap <silent> <C-t><C-p> :<C-u>tabprevious<CR>


" Plugin
" ==============================================================================

" unite.vim
" ------------------------------------------------------------------------------
let g:unite_source_file_mru_time_format = ''
let g:unite_enable_start_insert = 1
let g:unite_source_file_mru_ignore_pattern='.*\/$\|.*Application\ Data.*'
"file_mruの表示フォーマットを指定。空にすると表示スピードが高速化される
let g:unite_source_file_mru_filename_format = ''
nnoremap <silent> <Leader>ur  :<C-u>Unite file_mru<CR>
nnoremap <silent> <Leader>ub  :<C-u>Unite buffer_tab<CR>
nnoremap <silent> <Leader>uf  :<C-u>Unite file_rec<CR>
nnoremap <silent> <Leader>uo  :<C-u>Unite outline<CR>
nnoremap <silent> <Leader>ul  :<C-u>Unite line<CR>
nnoremap <silent> <Leader>uu  :<C-u>Unite buffer_tab file_mru bookmark file_rec<CR>
nnoremap <silent> <Leader>uc  :<C-u>Unite bookmark<CR>
nnoremap <silent> <Leader>uq  :<C-u>Unite quickfix<CR>
autocmd FileType unite call s:unite_my_settings()
function! s:unite_my_settings()
	imap <buffer> jj <Plug>(unite_insert_leave)
	nmap <buffer> <Esc> <Plug>(unite_exit)
	imap <buffer> <Esc> <Plug>(unite_exit)
	imap <buffer> <C-j> <Plug>(unite_exit)
	imap <buffer> <C-o> <Plug>(unite_insert_leave):<C-u>call unite#mappings#do_action('above')<CR>
endfunction

" neocomplete
" ------------------------------------------------------------------------------
let g:neocomplete#enable_at_startup = 1

" neosnippet
" ------------------------------------------------------------------------------
let g:neosnippet#snippets_directory= expand('~/.vim/snippets')
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
let g:neosnippet#disable_runtime_snippets = {
			\   '_' : 1,
			\ }

" kwbd
" ------------------------------------------------------------------------------
nnoremap <C-q><C-q> :Kwbd<CR>

" eregex
" ------------------------------------------------------------------------------
let g:eregex_meta_chars = '^$()|[]{}.*+?\/'
let g:vregex_meta_chars = '^$|[].*\/'
""" line
nnoremap s :<C-u>S//g<Left><Left>
""" buffer
nnoremap S :<C-u>%S//g<Left><Left>
""" buffers
nnoremap <Leader>S :<C-u>bufdo %S//g<Left><Left>

" zencoding-vim
" ------------------------------------------------------------------------------
let g:use_zen_complete_tag = 1
setlocal omnifunc=zencoding#CompleteTag

" Align
" ------------------------------------------------------------------------------
let g:Align_xstrlen=3

" VimFiler
" ------------------------------------------------------------------------------
let g:vimfiler_as_default_explorer = 1
nnoremap <Leader>vc :<C-u>VimFilerBufferDir<CR>
nnoremap <Leader>vi :<C-u>VimFilerBufferDir -split -simple -winwidth=35 -no-quit<CR>
"セーフモードを無効にした状態で起動する
let g:vimfiler_safe_mode_by_default = 0

" indent-guides
" ------------------------------------------------------------------------------
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1

" memolist
" ------------------------------------------------------------------------------
let g:memolist_path = expand('~/Dropbox/memolist.vim')
let g:memolist_memo_suffix = 'md'
let g:memolist_qfixgrep = 1
nnoremap <Leader>mf :exe "CtrlP" g:memolist_path<CR>
nnoremap <Leader>mc :MemoNew<CR>
nnoremap <Leader>ml :MemoList<CR>
nnoremap <Leader>mg :MemoGrep<CR>

" endtagcomment
" ------------------------------------------------------------------------------
nnoremap <Leader>cc :<C-u>call Endtagcomment()<CR>

" simple-javascript-indenter
" ------------------------------------------------------------------------------
let g:SimpleJsIndenter_BriefMode = 1
let g:SimpleJsIndenter_CaseIndentLevel = -1

" quickrun
" ------------------------------------------------------------------------------
let g:quickrun_config = {}

let g:quickrun_config['_'] = {
			\	"runner": "vimproc",
			\	"runner/vimproc/updatetime": 60
			\}

let g:quickrun_config['html'] = {
			\	"command" : "open",
			\	"exec"    : "%c %s",
			\	"outputter" : "null"
			\}

let g:quickrun_config['markdown'] = {
			\	"command" : "open",
			\	"cmdopt" : '-a',
			\	"args" : 'Marked',
			\	"exec" : "%c %o %a %s",
			\	"outputter" : "null"
			\}

let g:quickrun_config['watchdogs_checker/jshint'] = {
			\	"command" : "jshint",
			\	"cmdopt"  : "--config $HOME/.jshintrc",
			\	"exec"    : "%c %o %s:p",
			\	"errorformat" : "%f:\ line %l\\,\ col %c\\, %m",
			\}

let g:quickrun_config['watchdogs_checker/coffeelint'] = {
			\	"command" : "coffeelint",
			\	"exec"    : "%c --csv --file $HOME/.coffeelintrc %o %s:p",
			\	"errorformat" : '%f\\,%l\\,\\,%t%*[^\\,]\\,%m,%-G%.%#',
			\}

let g:quickrun_config['coffee/watchdogs_checker'] = {
			\	"type": "watchdogs_checker/coffeelint"
			\}

let g:quickrun_config['haskell/watchdogs_checker'] = {
			\	"type": "watchdogs_checker/ghc-mod"
			\}

let g:quickrun_config['watchdogs_checker/_'] = {
			\	"hook/back_window/enable" : 1,
			\	"hook/back_window/enable_exit" : 1,
			\	"hook/close_quickfix/enable_exit" : 1
			\}

" <C-c> で実行を強制終了させる
" quickrun.vim が実行していない場合には <C-c> を呼び出す
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"

nnoremap <silent> <Leader><C-r> :QuickRun<CR>

" watchdogs
" ------------------------------------------------------------------------------
" 書き込み後にシンタックスチェックを行う
let g:watchdogs_check_BufWritePost_enable = 1
call watchdogs#setup(g:quickrun_config)

" EasyMotion
" ------------------------------------------------------------------------------
" デフォルトのキーバインドを解除
let g:EasyMotion_do_mapping = 0

let g:EasyMotion_keys = ';HKLYUIOPNM,QWERTASDGZXCVBJF'
let g:EasyMotion_use_upper = 1

let g:EasyMotion_smartcase = 1
nmap e <Plug>(easymotion-s2)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" WordCount
" ------------------------------------------------------------------------------
set statusline+=[wc:%{WordCount()}]
set updatetime=500

" 外部設定ファイル
" ==============================================================================
" vimrc.local が存在していれば読み込む
if filereadable(expand('~/.vim/vimrc.local'))
	source ~/.vim/vimrc.local
endif
